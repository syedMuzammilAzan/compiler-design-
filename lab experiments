# CSA1458-CD

1.	Develop a lexical analyzer to identify identifiers, constants, operators using C program.
2.	Design  a  lexical  analyzer  for  given  language  should  ignore the redundant spaces, tabs and new lines and ignore comments.
3.	Develop a lexical analyzer to identify whether a given line is a comment or not.
4.	Develop a lexical analyzer to test whether a given identifier is valid or not.
5.	Design  a  lexical  analyzer  to validate operators.
6.	Develop a program to recognize strings under 'a*', 'a*b+', 'abb' using lexical analysis.
7.	Implement Lexical Analyzer using LEX or FLEX (Fast Lexical Analyzer).  The program should separate the tokens in the given C program and display with appropriate caption.
8.	Write a LEX specification file to take input C program from a .c file and count the 
 number of characters, number of lines & number of words.
9.	Write a LEX program to count the number of Macros defined and header files included in the C program.
10.	 Write a LEX program to print all the constants in the given C source program file.
11.	 Write a LEX program to print all HTML tags in the input file.
12.	Write a LEX program which adds line numbers to the given C program file and display the same in the standard output.
13.	Write a LEX program to count the number of comment lines in a given C program and eliminate them and write into another file.
14.	Implement a C program to perform symbol table operations.
15.	Implement a C program to eliminate left recursion and left factoring from a given CFG.
16.	Write a C program to find FIRST and FOLLOW for predictive parser.
17.	Write a C program for constructing of LL (1) parsing.
18.	Write a C program to implement Predictive parser.
19.	Write a C program to construct recursive descent parsing.
20.	 Write a C program for stack implementation of Shift Reduce parser.
21.	 Write a C program to implement operator precedence parsing.
22.	 Implement  a  simple  intermediate  code  generator  in  C  program,  which  produces  three address code statements for a given input expression.
23.	Write a LEX program to implement a simple calculator.
24.	Create YACC (or BISON) and LEX specification files to implement a basic calculator which accepts variables and constants of integer and float type.
25.	Write a C program to implement the back end of the compiler.
